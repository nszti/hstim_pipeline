import numpy as np
import matplotlib.pyplot as plt
# Given coordinates of the ROIs
import os
'''
coords = np.array([
    [273, 142],
    [235, 368],
    [191, 88],
    [247, 178],
    [401, 166],
    [437, 88],
    [310, 107],
    [358, 270],
    [194, 23],
    [389, 331],
    [483, 114],
    [199, 72],
    [391, 152]


])

    #36
    [273, 142],
    [191, 88],
    [268, 446],
    [247, 178],
    [401, 166],
    [437, 88],
    [310, 107],
    [194, 23],
    [203, 75],
    [321, 198],
    [317, 258],
    [483, 114],
    [199, 72]
    #37
    [193, 354],
    [216, 170],
    [273, 142],
    [235, 368],
    [225, 254],
    [114, 379],
    [313, 317],
    [408, 152],
    [273, 300],
    [131, 310],
    [292, 176],
    [40, 487],
    [203, 361],
    [323, 221],
    [321, 342],
    [103, 432]
    #38
[235, 368],
    [191, 88],
    [268, 446],
    [247, 178],
    [401, 166],
    [437, 88],
    [310, 107],
    [194, 23],
    [321, 198],
    [483, 114],
    [391, 152],
    #39
    [273, 142],
    [235, 368],
    [191, 88],
    [247, 178],
    [401, 166],
    [358, 270],
    [194, 23],
    [321, 342],
    [483, 114],
    [391, 152],
    #40
    [216, 170],
    [139, 174],
    [191, 88],
    [268, 446],
    [247, 178],
    [401, 166],
    [437, 88],
    [310, 107],
    [358, 270],
    [194, 23],
    [321, 198],
    [40, 487],
    [483, 114],
    [245, 48],
    [391, 152],
    #41
    [193, 354],
    [216, 170],
    [273, 142],
    [235, 368],
    [225, 254],
    [114, 379],
    [313, 317],
    [408, 152],
    [131, 310],
    [292, 176],
    [40, 487],
    [389, 331],
    [323, 221],
    [321, 342]
    #42
     [273, 142],
    [139, 174],
    [191, 88],
    [268, 446],
    [247, 178],
    [401, 166],
    [437, 88],
    [310, 107],
    [358, 270],
    [194, 23],
    [321, 198],
    [203, 105],
    [483, 114],
    [139, 170],
    [199, 72],
    [245, 48],
    [391, 152]
    #43
    [193, 354],
    [216, 170],
    [273, 142],
    [235, 368],
    [191, 88],
    [225, 254],
    [247, 178],
    [194, 23],
    [131, 310],
    [292, 176],
    [321, 342]
    #44
    [193, 354],
    [216, 170],
    [273, 142],
    [225, 254],
    [114, 379],
    [313, 317],
    [408, 152],
    [131, 310],
    [292, 176],
    [40, 487],
    [389, 331],
    [203, 361],
    [323, 221],
    [182, 180],
    [321, 342],
    [103, 432]
    #45
    [193, 354],
    [216, 170],
    [273, 142],
    [191, 88],
    [225, 254],
    [247, 178],
    [114, 379],
    [313, 317],
    [408, 152],
    [131, 310],
    [292, 176],
    [389, 331],
    [182, 180],
    [321, 342],
    [103, 432]
    #46




mean_center = np.mean(coords, axis=0)
mean_x, mean_y = mean_center
print(f"2: Mean center of mass (average of coordinates): ({mean_x}, {mean_y})")
'''
# Define a function for inverse distance weighting
def inverse_distance_weighted_center_of_mass(coords, alpha=2, center_of_mass=(0, 0)):
    x0, y0 = center_of_mass
    # Calculate distances from each point to the center
    distances = np.sqrt((coords[:, 0] - x0) ** 2 + (coords[:, 1] - y0) ** 2)

    # Calculate weights as the inverse of the distances raised to the power of alpha
    weights = 1 / (distances ** alpha)

    # Normalize the weights
    weights /= np.sum(weights)

    # Calculate the weighted center of mass
    y_cm = np.sum(weights * coords[:, 0])
    x_cm = np.sum(weights * coords[:, 1])

    return x_cm, y_cm


# Calculate the weighted center of mass using the inverse distance weighting
#x_cm, y_cm = inverse_distance_weighted_center_of_mass(coords)
#print(f"1: Weighted Center of Mass w center(0,0): ({x_cm}, {y_cm})")
'''
#================

# 1: Calculate the mean center of the given coordinates (simple average of X and Y coordinates)
mean_center = np.mean(coords, axis=0)
mean_x, mean_y = mean_center
#print(f"2: Mean center of mass (average of coordinates): ({mean_x}, {mean_y})")


# 2: Calculate the inverse distance weighted center of mass using the mean center as reference
def inverse_distance_weighted_center_of_mass(coords, center_of_mass, alpha=2):
    x0, y0 = center_of_mass
    # Calculate distances from each point to the center (mean center in this case)
    distances = np.sqrt((coords[:, 0] - x0) ** 2 + (coords[:, 1] - y0) ** 2)

    # Handle division by zero (if a point coincides with the center, set weight to a large value)
    distances = np.where(distances == 0, 1e-6, distances)  # Avoid zero distance

    # Calculate weights as the inverse of the distances raised to the power of alpha
    weights = 1 / (distances ** alpha)

    # Normalize the weights so that they sum to 1
    weights /= np.sum(weights)

    # Calculate the weighted center of mass
    x_cm = np.sum(weights * coords[:, 0])
    y_cm = np.sum(weights * coords[:, 1])

    return x_cm, y_cm


# 3: Use the mean center to calculate the weighted center of mass
x_cm, y_cm = inverse_distance_weighted_center_of_mass(coords, mean_center)
print(f"2: Weighted Center of Mass: ({x_cm}, {y_cm})")


#================

'''

'''files_data = [
    {'mean': [295.692307692307, 150.384615384615], 'type1': [246.6300,	107.5317891], 'type2': [283.560931,	144.6394872]},  # File 36
{'mean': [282.2941176,	149.4705882], 'type1': [230.8154,	119.1702], 'type2': [273.9856,	142.3939]},  # File 42
{'mean': [282.7333333,	180.6], 'type1': [241.5932,	133.3360], 'type2': [281.1639,	171.8521]},  # File 40
{'mean': [316.1818182,	175.2727273], 'type1': [266.2077,	125.0842], 'type2': [322.2270,	181.6071]},  # File 38
{'mean': [316.0, 161.46153846153845], 'type1': [259.6339300691869, 116.29589902260454],'type2': [309.90374383921676, 146.45366662440972]},  # File 46
{'mean': [309.4,	184.3], 'type1': [257.3940,	130.5072], 'type2': [303.9162,	173.3317]},  # File 39
{'mean': [228.9090909090909, 218.63636363636363], 'type1': [217.6865775689308, 162.46127186374488], 'type2': [233.95092565028241, 211.08493761258342]},  # File 43
{'mean': [239.86666666666667, 253.66666666666666], 'type1': [224.2307561290624, 214.08267863967583],'type2': [228.50063902899498, 249.87156922669328]}, # File 45
{'mean': [248.0714286,	285.9285714], 'type1': [241.6830,	261.9804], 'type2': [248.8401,	280.1693]},  # File 41
    {'mean': [228.9375,	297.8125], 'type1': [229.8641,	274.7318], 'type2': [237.5335,	301.8662]},  # File 37
    {'mean': [232.875, 288.0], 'type1': [226.39342150598156, 258.8626434215348],'type2': [231.8473226253097, 278.11331512394787]}  # File 44/11


]'''
'''in_um = 1.07

files_data = [
    {'type2': [283.560931*in_um,	144.6394872*in_um]},
{'type2': [273.9856*in_um,	142.3939*in_um]},
{'type2': [281.1639*in_um,	171.8521*in_um]},
{'type2': [322.2270*in_um,	181.6071*in_um]},
{'type2': [309.90374383921676*in_um, 146.45366662440972*in_um]},
{'type2': [303.9162*in_um,	173.3317*in_um]},
{'type2': [233.95092565028241*in_um, 211.08493761258342*in_um]},
{'type2': [228.50063902899498*in_um, 249.87156922669328*in_um]},
{'type2': [248.8401*in_um,	280.1693*in_um]},
    {'type2': [237.5335*in_um,	301.8662*in_um]},
    {'type2': [231.8473226253097*in_um, 278.11331512394787*in_um]}
]
# Create a figure to hold the plot
plt.figure(figsize=(8, 8))

# Loop through each file data and plot mean, type1 CoM, and type2 CoM
for i, data in enumerate(files_data):
    # Extract mean, type1, type2 CoM coordinates for each file
    #mean_x, mean_y = data['mean']
    #type1_x, type1_y = data['type1']
    type2_x, type2_y = data['type2']

    #plt.scatter(mean_x, mean_y, color='blue', marker='o' )
    #plt.scatter(type1_x, type1_y, color='green', marker='x')
    #plt.scatter(type2_x, type2_y, color='red', marker='^')
    #plt.scatter(mean_x, mean_y, color='blue', marker='o', label=f'File {i + 1} - Mean')
    #plt.scatter(type1_x, type1_y, color='green', marker='x', label=f'File {i + 1} - Type 1 CoM')
    plt.scatter(type2_x, type2_y, color='red', marker='^', label=f'File {i + 1}')

    # Label the file number above each marker
    #plt.text(mean_x, mean_y + 5, f'File {i + 1}', color='blue', fontsize=9, ha='center')
    #plt.text(type1_x, type1_y + 5, f'File {i + 1}', color='green', fontsize=9, ha='center')
    plt.text(type2_x, type2_y + 5, f'File {i + 1}', color='red', fontsize=9, ha='center')

# Set plot limits (assuming 512x512 FOV)
plt.xlim(0, 512*in_um)
plt.ylim(0, 512*in_um)

# Add title and labels
plt.title("Plotting Mean and CoM Coordinates from 6 Files on 512x512 FOV")
plt.xlabel("X Coordinate")
plt.ylabel("Y Coordinate")

# Add grid and legend
plt.grid(True)
plt.gca().invert_yaxis()  # Invert y-axis to match image coordinate system (upper left is (0, 0))
plt.legend()

# Show plot

plt.savefig(os.path.join('c:/Hyperstim/data_analysis/2025-04-15-Amouse-invivo-GCaMP6f/merged_tiffs/cellreg_files/36_37_38_39_40_41_42_43_44_45_46_ordered/', f'CoM_mean_weighted.svg'))
plt.show()'''

###
'''
plot_order = [5,6,8,2,10,9,3,1,7,4,0]
    np.array([[47, 309], [117, 297], [133, 315], [179, 309], [42, 334], [131, 339],
              [161, 283], [161, 233], [203, 139], [243, 235], [61, 259], [425, 138],
              [133, 323], [37, 367], [167, 357], [147, 227], [107, 295], [47, 241],
              [197, 331], [161, 369], [17, 239], [118, 250], [151, 265], [63, 393],
              [26, 414], [113, 337]]),       # f8
    np.array([
        [47, 309], [371, 287], [117, 297], [451, 297], [42, 334], [217, 269],
        [161, 283], [161, 233], [203, 139], [2, 368], [439, 169], [133, 323],
        [329, 313], [167, 357], [147, 227], [49, 253], [17, 239], [26, 414], [113, 337]
    ]),       # 9
np.array([
    [285, 205], [371, 287], [299, 147], [435, 37], [359, 187], [35, 209],
    [451, 297], [131, 339], [217, 269], [2, 368], [163, 339], [439, 169],
    [351, 249], [329, 313], [263, 183], [463, 235], [137, 389], [289, 219],
    [414, 226], [463, 273]]), # f10
np.array([
    [47, 309], [285, 205], [117, 297], [299, 147], [435, 37], [359, 187], [35, 209], [451, 297],
    [42, 334], [217, 269], [161, 233], [203, 139], [2, 368], [163, 339], [329, 313], [167, 357],
    [195, 227], [147, 227], [161, 369], [26, 394], [26, 414], [45, 393]
]), #f11
 np.array([
    [47, 309], [117, 297], [133, 315], [179, 309], [35, 209], [42, 334], [131, 339],
    [161, 283], [161, 233], [203, 139], [2, 368], [243, 235], [61, 259], [425, 138],
    [133, 323], [37, 367], [233, 249], [167, 357], [147, 227], [107, 295], [47, 241],
    [197, 331], [161, 369], [49, 253], [107, 409], [17, 239], [118, 250], [81, 275],
    [26, 394], [63, 393], [26, 414], [113, 337], [45, 393], [135, 341], [7, 383], [69, 413]
]), #f12
np.array([
    [285, 205], [299, 147], [435, 37], [359, 187], [217, 269], [163, 339],
    [283, 289], [351, 249], [329, 313], [237, 307], [263, 183], [137, 389],
    [175, 299], [358, 114], [422, 118], [414, 226], [467, 223], [490, 306],
    [466, 130], [251, 289]
]), #f13
np.array([
    [285, 205], [371, 287], [299, 147], [359, 187], [451, 297], [217, 269],
    [163, 339], [283, 289], [351, 249], [329, 313], [237, 307], [463, 235],
    [137, 389], [175, 299], [422, 118], [414, 226], [463, 273], [467, 223],
    [490, 306], [251, 289]
]), #f14
np.array([
    [47, 309], [371, 287], [117, 297], [35, 209], [42, 334], [131, 339],
    [217, 269], [161, 283], [161, 233], [203, 139], [2, 368], [61, 259],
    [133, 323], [37, 367], [167, 357], [147, 227], [47, 241], [49, 253],
    [107, 409], [17, 239], [118, 250], [26, 414], [113, 337], [135, 341],
    [5, 177]
]), #f15
np.array([
    [285, 205], [299, 147], [359, 187], [451, 297], [217, 269], [163, 339],
    [351, 249], [329, 313], [463, 235], [137, 389], [175, 299], [414, 226],
    [463, 273], [490, 306], [351, 277]
]), #f16
np.array([
    [47, 309], [285, 205], [371, 287], [299, 147], [359, 187], [35, 209],
    [131, 339], [217, 269], [203, 139], [2, 368], [329, 313], [367, 139],
    [423, 331], [26, 394], [414, 226], [26, 414], [490, 306]
]), #f17
np.array([
    [285, 205], [75, 325], [371, 287], [299, 147], [359, 187], [35, 209],
    [451, 297], [131, 339], [217, 269], [203, 139], [2, 368], [329, 313],
    [263, 183], [367, 139], [463, 235], [137, 389], [423, 331], [26, 394],
    [414, 226], [463, 273], [45, 393], [133, 187], [135, 341], [490, 306]
]) #f18

'''
'''
np.array([
    [179, 309], [115, 297], [133, 315], [41, 333], [87, 353], [117, 249],
    [129, 339], [243, 233], [113, 199], [45, 311], [159, 233], [23, 49],
    [2, 368], [98, 318], [233, 249], [367, 139], [63, 257], [135, 261],
    [203, 139], [161, 281], [73, 153], [145, 227], [47, 253], [37, 367],
    [107, 257], [177, 131], [107, 409], [167, 357], [133, 187], [195, 329],
    [43, 383], [47, 271], [151, 263], [161, 369], [111, 337], [45, 241],
    [27, 285], [42, 178], [65, 391], [26, 394], [115, 431], [85, 291]
]), #f20
np.array([
    [179, 309], [115, 297], [133, 315], [41, 333], [87, 353], [129, 339],
    [369, 285], [243, 233], [359, 187], [113, 199], [45, 311], [159, 233],
    [23, 49], [2, 368], [217, 267], [98, 318], [233, 249], [367, 139],
    [63, 257], [35, 209], [203, 139], [195, 227], [161, 281], [73, 153],
    [145, 227], [499, 275], [47, 253], [37, 367], [329, 313], [107, 409],
    [167, 357], [107, 125], [423, 329], [133, 187], [195, 329], [47, 271],
    [161, 369], [111, 337], [27, 285], [65, 391], [26, 394]
]),#f21
    np.array([
        [129, 339], [285, 205], [299, 147], [369, 285], [359, 187], [2, 368],
        [217, 267], [98, 318], [35, 209], [283, 289], [203, 139], [195, 227],
        [237, 305], [314, 69], [329, 313], [463, 233], [451, 297], [261, 183],
        [423, 329], [47, 271], [175, 299], [422, 118], [467, 283], [414, 226],
        [139, 389], [398, 106], [463, 271], [209, 269]
    ]), #f22
np.array([
    [179, 309], [115, 297], [133, 315], [41, 333], [87, 353], [129, 339],
    [369, 285], [359, 187], [45, 311], [159, 233], [2, 368], [217, 267],
    [98, 318], [233, 249], [367, 139], [63, 257], [35, 209], [203, 139],
    [195, 227], [161, 281], [73, 153], [145, 227], [47, 253], [37, 367],
    [329, 313], [463, 233], [107, 409], [167, 357], [423, 329], [133, 187],
    [161, 369], [111, 337], [414, 226], [139, 389], [65, 391], [26, 394]
]),#f23
np.array([
    [179, 309], [115, 297], [133, 315], [41, 333], [87, 353], [129, 339],
    [243, 233], [113, 199], [45, 311], [159, 233], [23, 49], [2, 368],
    [98, 318], [233, 249], [367, 139], [63, 257], [35, 209], [135, 261],
    [203, 139], [161, 281], [73, 153], [145, 227], [47, 253], [37, 367],
    [107, 257], [177, 131], [107, 409], [167, 357], [133, 187], [43, 383],
    [151, 263], [161, 369], [45, 241], [27, 285], [42, 178], [65, 391],
    [26, 394], [115, 431]
]),#f24
np.array([
    [285, 205], [299, 147], [435, 37], [359, 187], [217, 269], [163, 339],
    [283, 289], [351, 249], [329, 313], [237, 307], [263, 183], [137, 389],
    [175, 299], [358, 114], [422, 118], [414, 226], [467, 223], [490, 306],
    [466, 130], [251, 289]
]),#f25
np.array([
    [75, 323], [285, 205], [299, 147], [369, 285], [359, 187], [283, 289],
    [435, 37], [195, 227], [237, 305], [351, 249], [314, 69], [329, 313],
    [463, 233], [437, 191], [451, 297], [261, 183], [283, 153], [423, 329],
    [130, 406], [465, 131], [175, 299], [422, 118], [467, 283], [414, 226],
    [347, 205], [289, 219], [398, 106], [238, 326], [463, 271], [209, 161],
    [469, 251], [394, 126], [353, 111]
]),#f26
np.array([
    [179, 309], [115, 297], [133, 315], [41, 333], [87, 353], [129, 339],
    [369, 285], [243, 233], [113, 199], [45, 311], [159, 233], [23, 49],
    [98, 318], [233, 249], [367, 139], [63, 257], [35, 209], [203, 139],
    [161, 281], [73, 153], [145, 227], [47, 253], [37, 367], [177, 131],
    [107, 409], [167, 357], [133, 187], [43, 383], [27, 285], [65, 391],
    [26, 394]
]), #f27
np.array([
    [285, 205], [299, 147], [369, 285], [359, 187], [2, 368], [217, 267],
    [283, 289], [435, 37], [237, 305], [351, 249], [314, 69], [329, 313],
    [463, 233], [451, 297], [283, 153], [423, 329], [175, 299], [422, 118],
    [467, 283], [463, 271], [209, 269]
]), #f28
np.array([
    [115, 297], [41, 333], [129, 339], [299, 147], [369, 285], [359, 187],
    [45, 311], [159, 233], [2, 368], [98, 318], [367, 139], [35, 209],
    [145, 227], [47, 253], [463, 233], [423, 329], [133, 187], [26, 394]
]),#f29
np.array([
    [41, 333], [129, 339], [285, 205], [299, 147], [369, 285], [359, 187],
    [45, 311], [159, 233], [2, 368], [217, 267], [98, 318], [367, 139],
    [35, 209], [203, 139], [195, 227], [237, 305], [314, 69], [329, 313],
    [463, 233], [437, 191], [451, 297], [423, 329], [133, 187], [467, 283],
    [463, 271], [209, 269]
]) #f30
'''
'''
np.array([
    [86, 354], [169, 337], [137, 333], [119, 371], [147, 319], [73, 397],
    [39, 385], [85, 191], [29, 199], [104, 317], [2, 387], [83, 323],
    [29, 455], [23, 303], [54, 322], [21, 389], [73, 371], [10, 238],
    [111, 467], [89, 427], [41, 443], [123, 431], [61, 274], [63, 327],
    [43, 341], [5, 421], [95, 369], [81, 267], [47, 241], [34, 222],
    [105, 363], [77, 387]
]),#f33
np.array([
    [86, 354], [169, 337], [137, 333], [133, 387], [119, 371], [73, 397],
    [39, 385], [23, 275], [104, 317], [2, 387], [155, 233], [83, 323],
    [237, 213], [29, 455], [23, 303], [54, 322], [73, 371], [10, 238],
    [41, 443], [123, 431], [319, 309], [107, 393], [43, 341], [5, 421],
    [77, 387]
]),#f34
np.array([
    [169, 337], [133, 387], [73, 397], [452, 164], [237, 213],
    [333, 61], [21, 389], [74, 462], [174, 309]
]),#f35
np.array([
    [86, 354], [169, 337], [137, 333], [133, 387], [119, 371], [73, 397],
    [39, 385], [104, 317], [2, 387], [29, 455], [23, 303], [54, 322],
    [69, 477], [73, 371], [41, 443], [123, 431], [5, 421]
]),#f36
 np.array([
    [86, 354], [169, 337], [137, 333], [133, 387], [119, 371], [147, 319],
    [73, 397], [39, 385], [23, 275], [85, 191], [29, 199], [104, 317],
    [2, 387], [155, 233], [83, 323], [29, 455], [23, 303], [54, 322],
    [21, 389], [69, 477], [73, 371], [10, 238], [111, 467], [189, 369],
    [41, 403], [89, 427], [41, 443], [123, 431], [79, 435], [107, 393],
    [63, 327], [43, 341], [5, 421], [22, 289], [47, 241], [19, 351],
    [34, 222], [77, 387]
]),#f37
np.array([
    [133, 387], [452, 164], [237, 213], [135, 313], [333, 61],
    [267, 141], [74, 462], [319, 309], [307, 333]
]),#f38
np.array([
    [133, 387], [452, 164], [237, 213], [135, 313],
    [74, 462], [319, 309], [307, 333]
]),#f39
np.array([
    [86, 354], [169, 337], [137, 333], [119, 371], [147, 319], [73, 397],
    [39, 385], [85, 191], [104, 317], [2, 387], [155, 233], [83, 323],
    [29, 455], [23, 303], [54, 322], [21, 389], [73, 371], [10, 238],
    [111, 467], [189, 369], [89, 427], [41, 443], [123, 431], [63, 327],
    [43, 341], [5, 421], [105, 363], [77, 387]
]),#f40
np.array([
    [169, 337], [133, 387], [73, 397],
    [452, 164], [21, 389], [74, 462], [319, 309]
]),#f41
np.array([
    [86, 354], [169, 337], [137, 333], [119, 371], [73, 397], [39, 385],
    [23, 275], [104, 317], [2, 387], [155, 233], [21, 389], [69, 477],
    [73, 371], [189, 369], [41, 403], [41, 443], [123, 431], [319, 309],
    [79, 435], [81, 311], [5, 421], [105, 363]
]),#f42
np.array([
    [169, 337], [119, 371], [73, 397], [452, 164], [39, 385],
    [23, 275], [21, 389], [69, 477], [73, 371], [41, 403],
    [41, 443], [123, 431]
])#f43
'''
coords_list = [
np.array([
    [425, 139], [507, 279], [93, 259], [247, 127], [287, 159],
    [45, 273], [271, 43], [59, 369], [145, 237], [109, 161],
    [29, 9], [231, 85], [169, 43], [11, 281], [114, 288],
    [81, 329], [38, 180], [83, 111], [149, 295], [125, 159],
    [287, 235], [275, 307], [102, 124], [19, 321], [89, 341]
]),#f46
np.array([
    [507, 279], [45, 273], [499, 317], [59, 369], [145, 237],
    [109, 161], [29, 9], [169, 43], [11, 281], [114, 288],
    [38, 180], [83, 111], [481, 327], [19, 321]
]),#f47
np.array([
    [311, 63], [437, 191], [375, 183], [411, 141], [461, 283],
    [381, 197], [319, 127], [458, 84], [507, 255], [471, 309],
    [481, 327], [295, 207]
]),#f48
np.array([
    [375, 183], [45, 273], [499, 317], [271, 43], [59, 369],
    [145, 237], [109, 161], [29, 9], [169, 43], [114, 288],
    [471, 309], [38, 180], [481, 327], [443, 41], [19, 321]
]),#f49
np.array([
    [425, 139], [507, 279], [93, 259], [247, 127], [287, 159],
    [45, 273], [59, 369], [145, 237], [109, 161], [29, 9],
    [231, 85], [114, 288], [81, 329], [38, 180], [149, 295],
    [19, 321], [89, 341]
]),#f50
np.array([
    [311, 63], [507, 279], [437, 191], [375, 183], [93, 259],
    [411, 141], [461, 283], [215, 115], [381, 197], [319, 127],
    [499, 317], [481, 135], [271, 43], [458, 84], [507, 255],
    [349, 209], [485, 267], [283, 225], [390, 91], [253, 291],
    [277, 269], [306, 268], [265, 207], [487, 9], [471, 309],
    [483, 235], [351, 161], [467, 245], [497, 339], [353, 231],
    [481, 327], [330, 224], [170, 152], [295, 207], [443, 41],
    [497, 207], [434, 296], [353, 257], [439, 331], [490, 352],
    [443, 281], [315, 185], [501, 225], [441, 265], [369, 283]
]),#f51
np.array([
    [311, 63], [507, 279], [437, 191], [375, 183], [93, 259],
    [411, 141], [461, 283], [215, 115], [381, 197], [319, 127],
    [499, 317], [481, 135], [458, 84], [507, 255], [485, 267],
    [283, 225], [253, 291], [277, 269], [306, 268], [265, 207],
    [487, 9], [471, 309], [483, 235], [351, 161], [467, 245],
    [481, 327], [295, 207], [353, 257], [439, 331], [490, 352],
    [443, 281], [441, 265], [369, 283]
]),#f52
np.array([
    [425, 139], [507, 279], [93, 259], [247, 127], [287, 159],
    [45, 273], [59, 369], [145, 237], [109, 161], [29, 9],
    [11, 281], [114, 288], [81, 329], [38, 180], [149, 295],
    [19, 321], [89, 341]
]),#f53
 np.array([
    [311, 63], [507, 279], [437, 191], [375, 183], [93, 259],
    [411, 141], [346, 184], [461, 283], [381, 197], [319, 127],
    [499, 317], [271, 43], [458, 84], [507, 255], [485, 267],
    [283, 225], [390, 91], [253, 291], [277, 269], [471, 309],
    [483, 235], [351, 161], [467, 245], [497, 339], [353, 231],
    [265, 249], [481, 327], [295, 207], [443, 41], [353, 257],
    [190, 228], [439, 331], [490, 352], [443, 281], [441, 265],
    [369, 283]
]),#f54
np.array([
    [507, 279], [437, 191], [375, 183], [411, 141], [45, 273],
    [499, 317], [59, 369], [169, 43], [11, 281], [471, 309],
    [481, 327], [295, 207]
]),#f55
 np.array([
    [311, 63], [507, 279], [437, 191], [375, 183], [411, 141],
    [381, 197], [45, 273], [319, 127], [499, 317], [458, 84],
    [507, 255], [283, 225], [29, 9], [253, 291], [277, 269],
    [471, 309], [351, 161], [497, 339], [481, 327], [295, 207],
    [439, 331]
]),#f56
]
in_um = 1.07
# For example [2, 0, 1] means: plot File 3 first, then File 1, then File 2 --> give the index of the file in the coord_list
plot_order = [5,6,8,2,10,9,3,1,7,4,0]

com_list = [inverse_distance_weighted_center_of_mass(coords) for coords in coords_list]

com_list_um = np.array(com_list) * in_um

#plot
plt.figure(figsize=(8, 8))

for order_position, file_idx in enumerate(plot_order):
    x_um, y_um = com_list_um[file_idx]
    plt.scatter(x_um, y_um, color='red', marker='^')
    # Place label above marker (in image coordinate system)
    plt.text(x_um, y_um - 10, f'File {order_position + 1}', color='black', fontsize=7, ha='center')

# Plot limits (for 512x512 FOV)
plt.xlim(0, 512 * in_um)
plt.ylim(0, 512 * in_um)

# Title, labels, formatting
plt.title("CoM Coordinates")
plt.xlabel("X Coordinate (µm)")
plt.ylabel("Y Coordinate (µm)")
plt.grid(True)
plt.gca().invert_yaxis()
#plt.gca().invert_xaxis()
#plt.legend()

# Save and show
output_path = 'c:/Hyperstim/data_analysis/2025-05-20-Amouse-invivo-GCaMP6f/merged_tiffs/merged_2025-05-20-Amouse-invivo-GCaMP6f_MUnit_46_47_48_49_50_51_52_53_54_55_56/COM_file_coords_rev2_inv.svg'
plt.savefig(output_path)
plt.show()