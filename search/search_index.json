{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to HYPERSTIM Pipeline Documentation","text":"<p>A modular data processing pipeline designed for analysing 2-photon calcium imaging and electrical stimulation experiments. This site contains detailed documentation for the analysis pipeline</p>"},{"location":"index.html#what-youll-find-here","title":"\ud83d\udcd6 What You'll Find Here","text":"<ul> <li>Setup: Step-by-step instructions to set up and run the pipeline.</li> <li>API Reference: Overview of the available Python modules and functions.</li> </ul>"},{"location":"index.html#about-the-project","title":"\ud83d\udd2c About the Project","text":"<p>This pipeline supports the analysis of multi-session two-photon imaging experiments, including:</p> <ul> <li>Extraction and preprocessing of MESc TIFF files</li> <li>Suite2p-based ROI detection and signal extraction</li> <li>Automated activation analysis and visualization</li> <li>ROI tracking across sessions using CellReg</li> </ul>"},{"location":"index.html#technologies-used","title":"Technologies Used","text":"<ul> <li>Python 3.9, Suite2p</li> <li>MATLAB with CellReg</li> <li>Anaconda for environment management</li> <li>MkDocs for documentation</li> </ul>"},{"location":"index.html#commands-for-mkdocs-development","title":"Commands for MkDocs development","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> <p>Use the sidebar navigation or the links above to get started.</p>"},{"location":"api.html","title":"API Reference","text":"<p>This document describes the main Python modules and functions used in the calcium imaging and electrical stimulation data pipeline.</p>"},{"location":"api.html#pipeline_scriptpy","title":"<code>pipeline_script.py</code>","text":"<p>The main script to run the data processing pipeline. Configure paths and parameters here.</p> <ul> <li><code>RUN_MESC_PREPROCESS</code>: calls <code>mesc_tiff_extract.analyse_mesc_file()</code></li> <li><code>RUN_PREPROCESS</code>: runs <code>frequency_to_save.frequency_electrodeRoi_to_save</code>, <code>mesc_data_handling.tiff_merge</code>, <code>mesc_data_handling.extract_stim_frame</code></li> <li><code>RUN_ANALYSIS_PREP</code>: calls various analysis-related functions from <code>functions.py</code></li> <li><code>PLOTS</code>, <code>PLOT_BTW_EXP</code>, <code>RUN_CELLREG_PREP</code>, <code>RUN_CELLREG</code>, <code>RUN_CELLREG_ANALYSIS</code>: control plotting and CellReg-related processes</li> </ul>"},{"location":"api.html#mesc_loaderpy","title":"<code>mesc_loader.py</code>","text":""},{"location":"api.html#extract_useful_xml_paramsxml_path","title":"<code>extract_useful_xml_params(xml_path)</code>","text":"<p>Parses a <code>.mesc</code> file and extracts useful metadata.</p>"},{"location":"api.html#mesc_tiff_extractpy","title":"<code>mesc_tiff_extract.py</code>","text":""},{"location":"api.html#analyse_mesc_file","title":"<code>analyse_mesc_file()</code>","text":"<p>Extracts TIFF images, saves <code>mesc_data.npy</code>, <code>trigger.txt</code>, <code>fileId.txt</code>, <code>frameNo.txt</code>.</p>"},{"location":"api.html#frequency_to_savepy","title":"<code>frequency_to_save.py</code>","text":""},{"location":"api.html#frequency_electroderoi_to_save","title":"<code>frequency_electrodeRoi_to_save()</code>","text":"<p>Saves frequency and electrode ROI info into <code>.npy</code> files.</p>"},{"location":"api.html#mesc_data_handlingpy","title":"<code>mesc_data_handling.py</code>","text":""},{"location":"api.html#tiff_merge","title":"<code>tiff_merge()</code>","text":"<p>Merges multiple TIFFs based on experimental parameters. Saves merged TIFFs and associated frequency and ROI info.</p>"},{"location":"api.html#extract_stim_frame","title":"<code>extract_stim_frame()</code>","text":"<p>Saves <code>FRAMENUM.NPY</code> and <code>STIMTIMES.NPY</code>.</p>"},{"location":"api.html#suite2p_scriptpy","title":"<code>suite2p_script.py</code>","text":""},{"location":"api.html#run_suite2p","title":"<code>run_suite2p()</code>","text":"<p>Runs Suite2p on the merged TIFF files using tailored parameters for GCaMP indicators.</p>"},{"location":"api.html#functionspy","title":"<code>functions.py</code>","text":""},{"location":"api.html#stim_dur_val","title":"<code>stim_dur_val()</code>","text":"<p>Saves stimulation duration per merged TIFF to <code>stimDurations.npy</code>.</p>"},{"location":"api.html#electroderoi_val","title":"<code>electrodeROI_val()</code>","text":"<p>Saves the selected electrode ROI number into <code>electrodeROI.npy</code>.</p>"},{"location":"api.html#dist_vals","title":"<code>dist_vals()</code>","text":"<p>Calculates and saves distances between ROIs and the electrode ROI.</p>"},{"location":"api.html#spontaneous_baseline_val","title":"<code>spontaneous_baseline_val()</code>","text":"<p>Calculates baseline from fixed window in spontaneous recordings.</p>"},{"location":"api.html#baseline_val","title":"<code>baseline_val()</code>","text":"<p>Calculates F0 baseline before stim onset using <code>stimTimes.npy</code>.</p>"},{"location":"api.html#activated_neurons_val","title":"<code>activated_neurons_val()</code>","text":"<p>Detects activated ROIs per block. Saves <code>.npy</code> and CellReg <code>.mat</code> mask files.</p>"},{"location":"api.html#timecourse_val","title":"<code>timecourse_val()</code>","text":"<p>Analyzes per-trial traces and stimulation effects across time.</p>"},{"location":"api.html#data_analysis_values","title":"<code>data_analysis_values()</code>","text":"<p>Generates multiple summary plots, e.g., active cell count, avg amplitude, etc.</p>"},{"location":"api.html#plot_stim_traces","title":"<code>plot_stim_traces()</code>","text":"<p>Generates stimulation-aligned plots and activation maps.</p>"},{"location":"api.html#plot_across_experiments","title":"<code>plot_across_experiments()</code>","text":"<p>Overlays stimulation response traces across experiments.</p>"},{"location":"api.html#analyze_merged_activation_and_save","title":"<code>analyze_merged_activation_and_save()</code>","text":"<p>Block-wise activation detection across multiple stimulation files.</p>"},{"location":"api.html#compy","title":"<code>CoM.py</code>","text":""},{"location":"api.html#calculate_center_of_mass","title":"<code>calculate_center_of_mass()</code>","text":"<p>Uses ROI coordinates to compute spatial center of activation.</p>"},{"location":"api.html#cellreg_processpy","title":"<code>cellreg_process.py</code>","text":""},{"location":"api.html#suite2p_to_cellreg_masks","title":"<code>suite2p_to_cellreg_masks()</code>","text":"<p>Creates CellReg <code>.mat</code> masks from Suite2p output.</p>"},{"location":"api.html#single_block_activation","title":"<code>single_block_activation()</code>","text":"<p>Legacy method for per-stim activation detection and mask saving.</p>"},{"location":"api.html#cellreg_analysispy","title":"<code>cellreg_analysis.py</code>","text":""},{"location":"api.html#cellreg_analysis_overlap","title":"<code>cellreg_analysis_overlap()</code>","text":"<p>Analyzes overlap from CellReg results. Outputs <code>session_pair_overlap.csv</code>.</p>"},{"location":"api.html#cellreg_analysispy_1","title":"<code>cellreg_analysis.py</code>","text":""},{"location":"api.html#run_cellreg_matlab","title":"<code>run_cellreg_matlab()</code>","text":"<p>Runs MATLAB CellReg script via Python interface.</p> <p>Note: Many functions save data in <code>.npy</code>, <code>.csv</code>, <code>.svg</code>, <code>.mat</code> formats as part of the pipeline's modular output.</p>"},{"location":"setup/interpreter.html","title":"\ud83d\udee0\ufe0f Git &amp; PyCharm Setup Guide","text":"<p>Follow these steps to set up your cloned GitHub project in PyCharm and ensure Git is properly configured.</p>"},{"location":"setup/interpreter.html#0-clone-the-repository-if-not-done-yet","title":"0. Clone the Repository (if not done yet)","text":"<p>Use Git Bash or your terminal:</p> <pre><code>git clone https://github.com/your-username/your-repo.git\n</code></pre> <p>This will create a folder named <code>your-repo</code>.</p>"},{"location":"setup/interpreter.html#1-open-the-project-in-pycharm","title":"1. Open the Project in PyCharm","text":"<ul> <li>Launch PyCharm</li> <li>Select \u201cOpen\u201d from the welcome screen (or go to File &gt; Open...)</li> <li>Navigate to the folder where your GitHub repo is cloned</li> <li>Click Select Folder \u2192 choose This Window or New Window to open the project.</li> </ul>"},{"location":"setup/interpreter.html#2-make-sure-git-is-recognised","title":"2. Make Sure Git is Recognised","text":"<ul> <li>Go to File &gt; Settings (or PyCharm &gt; Preferences on macOS)</li> <li>Navigate to Version Control &gt; Git</li> <li>Ensure the path to Git executable is correct. Click Test to verify</li> </ul>"},{"location":"setup/interpreter.html#3-enable-version-control-integration","title":"3. Enable Version Control Integration","text":"<p>If PyCharm doesn't automatically detect Git:</p> <ul> <li>Go to VCS &gt; Enable Version Control Integration (only appears if Git isn't yet detected, otherwise you\u2019ll see Git)</li> <li>Select Git from the list and click OK</li> </ul>"},{"location":"setup/interpreter.html#4-check-the-git-remote","title":"4. Check the Git Remote","text":"<p>To verify the remote origin (connection to GitHub):</p> <ul> <li>Go to Git &gt; Manage Remotes</li> <li>Or open the Terminal and run:</li> </ul> <pre><code>git remote -v\n</code></pre> <p>You should see:</p> <pre><code>origin  https://github.com/your-username/your-repo.git (fetch)\norigin  https://github.com/your-username/your-repo.git (push)\n</code></pre> <p>If it's missing, add it manually from the terminal:</p> <pre><code>git remote add origin https://github.com/your-username/your-repo.git\n</code></pre> <p>This ensures that your Git integration is ready to use for commits, pushes, and GitHub Pages deployment.</p>"},{"location":"setup/matlab_integration.html","title":"MATLAB Engine API Setup for PyCharm Integration","text":"<p>This guide explains how to run a MATLAB <code>.m</code> script from a Python <code>.py</code> script using the MATLAB Engine API in PyCharm.</p>"},{"location":"setup/matlab_integration.html#outlook","title":"Outlook","text":"<p>I explored multiple options for integrating MATLAB and Python, and found the MATLAB Engine API to be the most reliable. Below is a working setup you can use in PyCharm.</p>"},{"location":"setup/matlab_integration.html#step-0-version-compatibility","title":"Step 0: Version Compatibility","text":"<ul> <li>Check that you are using a 64-bit version of Python, especially if using a virtual environment (e.g., Anaconda).</li> <li>Confirm your MATLAB release version.</li> <li>Use the official compatibility table to check Python\u2013MATLAB version compatibility.</li> </ul>"},{"location":"setup/matlab_integration.html#step-1-install-matlab-engine-api","title":"Step 1: Install MATLAB Engine API","text":"<ol> <li>Open Anaconda Prompt or Command Prompt as Administrator.</li> <li>Navigate to the engine API folder, usually:</li> </ol> <pre><code>C:\\Program Files\\MATLAB\\[your_version]\\extern\\engines\\python\n</code></pre> <ol> <li>Run this installation command inside your virtual environment:</li> </ol> <pre><code>python setup.py install\n</code></pre> <p>For alternative installation methods, refer to the official guide.</p>"},{"location":"setup/matlab_integration.html#step-2-place-m-and-py-files-together","title":"Step 2: Place <code>.m</code> and <code>.py</code> Files Together","text":"<p>Put your <code>main.m</code> file in the same directory as your <code>main.py</code>.</p>"},{"location":"setup/matlab_integration.html#step-3-import-the-matlab-engine","title":"Step 3: Import the MATLAB Engine","text":"<p>In your <code>main.py</code>:</p> <pre><code>import matlab.engine\n</code></pre> <p>If you get a <code>No module named 'matlab'</code> error, your installation didn\u2019t work \u2014 double-check your install path.</p>"},{"location":"setup/matlab_integration.html#step-4-test-the-connection","title":"Step 4: Test the Connection","text":"<p>Test if MATLAB connects:</p> <pre><code>import matlab.engine\neng = matlab.engine.start_matlab()\neng.eval(\"disp('Connected to MATLAB')\", nargout=0)\neng.quit()\n</code></pre>"},{"location":"setup/matlab_integration.html#step-5-pass-parameters-from-python-to-matlab","title":"Step 5: Pass Parameters from Python to MATLAB","text":"<p>You can't directly set workspace variables in MATLAB that are visible inside functions. Instead:</p> <ul> <li>Modify your MATLAB script into a function that accepts parameters.</li> <li>In Python, call the MATLAB function with those parameters:</li> </ul> <pre><code>eng = matlab.engine.start_matlab()\neng.cd(r'path/to/folder')\neng.my_matlab_function(data_path, nargout=0)\neng.quit()\n</code></pre> <p>Avoid clearing variables in your MATLAB code (<code>clear all</code>), as it may delete passed arguments.</p>"},{"location":"setup/matlab_integration.html#step-6-run-the-integrated-code","title":"Step 6: Run the Integrated Code","text":"<p>Once the MATLAB function accepts arguments, just run:</p> <pre><code>eng.my_function_from_main(nargout=0)\n</code></pre>"},{"location":"setup/matlab_integration.html#done","title":"\ud83c\udf89 Done!","text":"<p>Congratulations \u2014 your Python project now integrates MATLAB! \ud83e\udd2f\ud83e\udd73</p>"},{"location":"setup/usage.html","title":"Setup Guide","text":"<p>This guide walks you through the setup and usage of the calcium imaging and stimulation data pipeline.</p>"},{"location":"setup/usage.html#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<p>Before you begin, make sure the following are installed:</p> <ul> <li>Git</li> <li>Anaconda (recommended for managing Python environments)</li> <li>MATLAB (recommended versions: 2021b to 2023a)</li> <li>Also install the Parallel Computing Toolbox for CellReg</li> <li>Python IDE (e.g., PyCharm)</li> </ul>"},{"location":"setup/usage.html#repository-setup","title":"\ud83d\udcc1 Repository Setup","text":""},{"location":"setup/usage.html#clone-the-repository","title":"Clone the Repository","text":"<p>Open Git Bash or your terminal and run:</p> <pre><code>git clone https://github.com/nszti/hstim_pipeline.git\ncd hstim_pipeline\n</code></pre> <p>You should now see the <code>hstim_pipeline</code> folder in your working directory.</p>"},{"location":"setup/usage.html#project-structure","title":"\ud83e\uddf1 Project Structure","text":"<p>Here's a simplified layout of the project:</p> <pre><code>Hyperstim/pipeline_pending/\n\u251c\u2500\u2500 pipeline_script.py\n\u251c\u2500\u2500 mesc_loader.py\n\u251c\u2500\u2500 general.py\n\u251c\u2500\u2500 package_for_pipeline/\n\u2502   \u251c\u2500\u2500 CoM.py\n\u2502   \u251c\u2500\u2500 cellreg_analysis.py\n\u2502   \u251c\u2500\u2500 cellreg_process.py\n\u2502   \u251c\u2500\u2500 frequency_to_save.py\n\u2502   \u251c\u2500\u2500 functions.py\n\u2502   \u251c\u2500\u2500 mesc_data_handling.py\n\u2502   \u251c\u2500\u2500 mesc_tiff_extract.py\n\u2502   \u251c\u2500\u2500 suite2p_script.py\n\u2502   \u2514\u2500\u2500 tiff_merge.py\n\u2514\u2500\u2500 hdf5io/\n    \u2514\u2500\u2500 setup.py\n</code></pre>"},{"location":"setup/usage.html#python-environment-setup","title":"\ud83d\udc0d Python Environment Setup","text":"<p>The environment includes dependencies for Suite2p and the custom pipeline scripts.</p>"},{"location":"setup/usage.html#step-by-step","title":"Step-by-Step:","text":"<ol> <li>Open your terminal / Anaconda Prompt</li> <li>Navigate to the repository directory containing:    <code>bash    environment.yml</code></li> <li>Create the Conda environment (this may take a few minutes):</li> <li>First, make sure there is no environment with the same name, then use the command:    <code>bash    conda env create -f environment.yml</code></li> <li>You'll probably get <code>FutureWarning</code> messages about the <code>conda</code> command, but you can ignore them as it will create the environment anyway.</li> <li>Activate it:    <code>bash    conda activate suite2p</code></li> <li>Verify Suite2p is installed:    <code>bash    suite2p --version    python -m suite2p</code></li> <li>You can open the Suite2p GUI with the command:    <code>bash    python -m suite2p</code></li> </ol>"},{"location":"setup/usage.html#ide-setup-pycharm-recommended","title":"\ud83d\udda5\ufe0f IDE Setup (PyCharm Recommended)","text":""},{"location":"setup/usage.html#connect-conda-environment","title":"Connect Conda Environment","text":"<p>Please see here, the detailed instructions to connect the Conda environment to your IDE, but here's a quick summary for PyCharm: 1. Open PyCharm 2. Go to Project &gt; Python Interpreter 3. Click Add Interpreter 4. Select Add Local Interpreter 5. Choose Conda and select the <code>suite2p</code> environment 6. Click OK and wait for it to load the packages</p> <p>Now your IDE should be able to run the Python-based parts of the pipeline.</p>"},{"location":"setup/usage.html#matlab-cellreg-setup","title":"\ud83e\uddec MATLAB + CellReg Setup","text":"<p>Since CellReg is MATLAB-based:</p> <ul> <li>Download and install CellReg</li> <li>Add all folders and subfolders of CellReg to the MATLAB path</li> <li>Use the MATLAB GUI to:</li> <li>Load sessions</li> <li>Run non-rigid alignment</li> <li>Run probabilistic modeling (12 microns pixel size)</li> </ul> <p>Full instructions are available in the official CellReg documentation.</p> <p>Once setup is complete, continue to the <code>pipeline_script.py</code> to run the analysis.</p>"}]}