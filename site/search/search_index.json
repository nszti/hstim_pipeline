{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>This document describes the main Python modules and functions used in the calcium imaging and electrical stimulation data pipeline.</p>"},{"location":"api/#pipeline_scriptpy","title":"<code>pipeline_script.py</code>","text":"<p>The main script to run the data processing pipeline. Configure paths and parameters here.</p> <ul> <li><code>RUN_MESC_PREPROCESS</code>: calls <code>mesc_tiff_extract.analyse_mesc_file()</code></li> <li><code>RUN_PREPROCESS</code>: runs <code>frequency_to_save.frequency_electrodeRoi_to_save</code>, <code>mesc_data_handling.tiff_merge</code>, <code>mesc_data_handling.extract_stim_frame</code></li> <li><code>RUN_ANALYSIS_PREP</code>: calls various analysis-related functions from <code>functions.py</code></li> <li><code>PLOTS</code>, <code>PLOT_BTW_EXP</code>, <code>RUN_CELLREG_PREP</code>, <code>RUN_CELLREG</code>, <code>RUN_CELLREG_ANALYSIS</code>: control plotting and CellReg-related processes</li> </ul>"},{"location":"api/#mesc_loaderpy","title":"<code>mesc_loader.py</code>","text":""},{"location":"api/#extract_useful_xml_paramsxml_path","title":"<code>extract_useful_xml_params(xml_path)</code>","text":"<p>Parses a <code>.mesc</code> file and extracts useful metadata.</p>"},{"location":"api/#mesc_tiff_extractpy","title":"<code>mesc_tiff_extract.py</code>","text":""},{"location":"api/#analyse_mesc_file","title":"<code>analyse_mesc_file()</code>","text":"<p>Extracts TIFF images, saves <code>mesc_data.npy</code>, <code>trigger.txt</code>, <code>fileId.txt</code>, <code>frameNo.txt</code>.</p>"},{"location":"api/#frequency_to_savepy","title":"<code>frequency_to_save.py</code>","text":""},{"location":"api/#frequency_electroderoi_to_save","title":"<code>frequency_electrodeRoi_to_save()</code>","text":"<p>Saves frequency and electrode ROI info into <code>.npy</code> files.</p>"},{"location":"api/#mesc_data_handlingpy","title":"<code>mesc_data_handling.py</code>","text":""},{"location":"api/#tiff_merge","title":"<code>tiff_merge()</code>","text":"<p>Merges multiple TIFFs based on experimental parameters. Saves merged TIFFs and associated frequency and ROI info.</p>"},{"location":"api/#extract_stim_frame","title":"<code>extract_stim_frame()</code>","text":"<p>Saves <code>FRAMENUM.NPY</code> and <code>STIMTIMES.NPY</code>.</p>"},{"location":"api/#suite2p_scriptpy","title":"<code>suite2p_script.py</code>","text":""},{"location":"api/#run_suite2p","title":"<code>run_suite2p()</code>","text":"<p>Runs Suite2p on the merged TIFF files using tailored parameters for GCaMP indicators.</p>"},{"location":"api/#functionspy","title":"<code>functions.py</code>","text":""},{"location":"api/#stim_dur_val","title":"<code>stim_dur_val()</code>","text":"<p>Saves stimulation duration per merged TIFF to <code>stimDurations.npy</code>.</p>"},{"location":"api/#electroderoi_val","title":"<code>electrodeROI_val()</code>","text":"<p>Saves the selected electrode ROI number into <code>electrodeROI.npy</code>.</p>"},{"location":"api/#dist_vals","title":"<code>dist_vals()</code>","text":"<p>Calculates and saves distances between ROIs and the electrode ROI.</p>"},{"location":"api/#spontaneous_baseline_val","title":"<code>spontaneous_baseline_val()</code>","text":"<p>Calculates baseline from fixed window in spontaneous recordings.</p>"},{"location":"api/#baseline_val","title":"<code>baseline_val()</code>","text":"<p>Calculates F0 baseline before stim onset using <code>stimTimes.npy</code>.</p>"},{"location":"api/#activated_neurons_val","title":"<code>activated_neurons_val()</code>","text":"<p>Detects activated ROIs per block. Saves <code>.npy</code> and CellReg <code>.mat</code> mask files.</p>"},{"location":"api/#timecourse_val","title":"<code>timecourse_val()</code>","text":"<p>Analyzes per-trial traces and stimulation effects across time.</p>"},{"location":"api/#data_analysis_values","title":"<code>data_analysis_values()</code>","text":"<p>Generates multiple summary plots, e.g., active cell count, avg amplitude, etc.</p>"},{"location":"api/#plot_stim_traces","title":"<code>plot_stim_traces()</code>","text":"<p>Generates stimulation-aligned plots and activation maps.</p>"},{"location":"api/#plot_across_experiments","title":"<code>plot_across_experiments()</code>","text":"<p>Overlays stimulation response traces across experiments.</p>"},{"location":"api/#analyze_merged_activation_and_save","title":"<code>analyze_merged_activation_and_save()</code>","text":"<p>Block-wise activation detection across multiple stimulation files.</p>"},{"location":"api/#compy","title":"<code>CoM.py</code>","text":""},{"location":"api/#calculate_center_of_mass","title":"<code>calculate_center_of_mass()</code>","text":"<p>Uses ROI coordinates to compute spatial center of activation.</p>"},{"location":"api/#cellreg_processpy","title":"<code>cellreg_process.py</code>","text":""},{"location":"api/#suite2p_to_cellreg_masks","title":"<code>suite2p_to_cellreg_masks()</code>","text":"<p>Creates CellReg <code>.mat</code> masks from Suite2p output.</p>"},{"location":"api/#single_block_activation","title":"<code>single_block_activation()</code>","text":"<p>Legacy method for per-stim activation detection and mask saving.</p>"},{"location":"api/#cellreg_analysispy","title":"<code>cellreg_analysis.py</code>","text":""},{"location":"api/#cellreg_analysis_overlap","title":"<code>cellreg_analysis_overlap()</code>","text":"<p>Analyzes overlap from CellReg results. Outputs <code>session_pair_overlap.csv</code>.</p>"},{"location":"api/#cellreg_analysispy_1","title":"<code>cellreg_analysis.py</code>","text":""},{"location":"api/#run_cellreg_matlab","title":"<code>run_cellreg_matlab()</code>","text":"<p>Runs MATLAB CellReg script via Python interface.</p> <p>Note: Many functions save data in <code>.npy</code>, <code>.csv</code>, <code>.svg</code>, <code>.mat</code> formats as part of the pipeline's modular output.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide walks you through the setup and usage of the calcium imaging and stimulation data pipeline.</p>"},{"location":"usage/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<p>Before you begin, make sure the following are installed:</p> <ul> <li>Git</li> <li>Anaconda</li> <li>MATLAB (recommended versions: 2021b to 2023a)  </li> <li>Also install the Parallel Computing Toolbox for CellReg</li> <li>Python IDE (e.g., PyCharm)</li> </ul>"},{"location":"usage/#repository-setup","title":"\ud83d\udcc1 Repository Setup","text":""},{"location":"usage/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Open Git Bash or your terminal and run:</p> <pre><code>git clone https://github.com/nszti/hstim_pipeline.git\ncd hstim_pipeline\n</code></pre> <p>You should now see the <code>hstim_pipeline</code> folder in your working directory.</p>"},{"location":"usage/#project-structure","title":"\ud83e\uddf1 Project Structure","text":"<p>Here's a simplified layout of the project:</p> <pre><code>Hyperstim/pipeline_pending/\n\u251c\u2500\u2500 pipeline_script.py\n\u251c\u2500\u2500 mesc_loader.py\n\u251c\u2500\u2500 general.py\n\u251c\u2500\u2500 package_for_pipeline/\n\u2502   \u251c\u2500\u2500 CoM.py\n\u2502   \u251c\u2500\u2500 cellreg_analysis.py\n\u2502   \u251c\u2500\u2500 cellreg_process.py\n\u2502   \u251c\u2500\u2500 frequency_to_save.py\n\u2502   \u251c\u2500\u2500 functions.py\n\u2502   \u251c\u2500\u2500 mesc_data_handling.py\n\u2502   \u251c\u2500\u2500 mesc_tiff_extract.py\n\u2502   \u251c\u2500\u2500 suite2p_script.py\n\u2502   \u2514\u2500\u2500 tiff_merge.py\n\u2514\u2500\u2500 hdf5io/\n    \u2514\u2500\u2500 setup.py\n</code></pre>"},{"location":"usage/#python-environment-setup","title":"\ud83d\udc0d Python Environment Setup","text":"<p>The environment includes dependencies for Suite2p and the custom pipeline scripts.</p>"},{"location":"usage/#step-by-step","title":"Step-by-Step:","text":"<ol> <li>Open your terminal / Anaconda Prompt</li> <li>Navigate to the repository directory:    <code>bash    cd path/to/hstim_pipeline</code></li> <li>Create the Conda environment:    <code>bash    conda env create -f environment.yml</code></li> <li>Activate it:    <code>bash    conda activate suite2p</code></li> <li>Verify Suite2p is installed:    <code>bash    suite2p --version    python -m suite2p</code></li> </ol>"},{"location":"usage/#ide-setup-pycharm-recommended","title":"\ud83d\udda5\ufe0f IDE Setup (PyCharm Recommended)","text":""},{"location":"usage/#connect-conda-environment","title":"Connect Conda Environment","text":"<ol> <li>Open PyCharm</li> <li>Go to Project &gt; Python Interpreter</li> <li>Click Add Interpreter</li> <li>Select Add Local Interpreter</li> <li>Choose Conda and select the <code>suite2p</code> environment</li> <li>Click OK and wait for it to load the packages</li> </ol> <p>Now your IDE should be able to run the Python-based parts of the pipeline.</p>"},{"location":"usage/#matlab-cellreg-setup","title":"\ud83e\uddec MATLAB + CellReg Setup","text":"<p>Since CellReg is MATLAB-based:</p> <ul> <li>Download and install CellReg</li> <li>Add all folders and subfolders of CellReg to the MATLAB path</li> <li>Use the MATLAB GUI to:</li> <li>Load sessions</li> <li>Run non-rigid alignment</li> <li>Run probabilistic modeling (12 microns pixel size)</li> </ul> <p>Full instructions are available in the official CellReg documentation.</p> <p>Once setup is complete, continue to the <code>pipeline_script.py</code> to run the analysis.</p>"}]}